/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var SolidityTypes_pb = require('./SolidityTypes_pb.js');
goog.object.extend(proto, SolidityTypes_pb);
goog.exportSymbol('proto.Account', null, global);
goog.exportSymbol('proto.StakeMiningParameters', null, global);
goog.exportSymbol('proto.StakeMiningProperties', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StakeMiningParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.StakeMiningParameters.repeatedFields_, null);
};
goog.inherits(proto.StakeMiningParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.StakeMiningParameters.displayName = 'proto.StakeMiningParameters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StakeMiningProperties = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.StakeMiningProperties.repeatedFields_, null);
};
goog.inherits(proto.StakeMiningProperties, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.StakeMiningProperties.displayName = 'proto.StakeMiningProperties';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Account = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Account.repeatedFields_, null);
};
goog.inherits(proto.Account, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Account.displayName = 'proto.Account';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.StakeMiningParameters.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StakeMiningParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.StakeMiningParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StakeMiningParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StakeMiningParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    supportedtokensList: jspb.Message.toObjectList(msg.getSupportedtokensList(),
    SolidityTypes_pb.address.toObject, includeInstance),
    supporteth: jspb.Message.getFieldWithDefault(msg, 2, false),
    mintedtoken: (f = msg.getMintedtoken()) && SolidityTypes_pb.address.toObject(includeInstance, f),
    startblock: (f = msg.getStartblock()) && SolidityTypes_pb.uint256.toObject(includeInstance, f),
    endblock: (f = msg.getEndblock()) && SolidityTypes_pb.uint256.toObject(includeInstance, f),
    tokensperblock: (f = msg.getTokensperblock()) && SolidityTypes_pb.uint256.toObject(includeInstance, f),
    minimumbalance: (f = msg.getMinimumbalance()) && SolidityTypes_pb.uint256.toObject(includeInstance, f),
    teamwallet: (f = msg.getTeamwallet()) && SolidityTypes_pb.address.toObject(includeInstance, f),
    teampercentage: (f = msg.getTeampercentage()) && SolidityTypes_pb.uint256.toObject(includeInstance, f),
    priceoracle: (f = msg.getPriceoracle()) && SolidityTypes_pb.address.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StakeMiningParameters}
 */
proto.StakeMiningParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StakeMiningParameters;
  return proto.StakeMiningParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StakeMiningParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StakeMiningParameters}
 */
proto.StakeMiningParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SolidityTypes_pb.address;
      reader.readMessage(value,SolidityTypes_pb.address.deserializeBinaryFromReader);
      msg.addSupportedtokens(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSupporteth(value);
      break;
    case 3:
      var value = new SolidityTypes_pb.address;
      reader.readMessage(value,SolidityTypes_pb.address.deserializeBinaryFromReader);
      msg.setMintedtoken(value);
      break;
    case 4:
      var value = new SolidityTypes_pb.uint256;
      reader.readMessage(value,SolidityTypes_pb.uint256.deserializeBinaryFromReader);
      msg.setStartblock(value);
      break;
    case 5:
      var value = new SolidityTypes_pb.uint256;
      reader.readMessage(value,SolidityTypes_pb.uint256.deserializeBinaryFromReader);
      msg.setEndblock(value);
      break;
    case 6:
      var value = new SolidityTypes_pb.uint256;
      reader.readMessage(value,SolidityTypes_pb.uint256.deserializeBinaryFromReader);
      msg.setTokensperblock(value);
      break;
    case 7:
      var value = new SolidityTypes_pb.uint256;
      reader.readMessage(value,SolidityTypes_pb.uint256.deserializeBinaryFromReader);
      msg.setMinimumbalance(value);
      break;
    case 8:
      var value = new SolidityTypes_pb.address;
      reader.readMessage(value,SolidityTypes_pb.address.deserializeBinaryFromReader);
      msg.setTeamwallet(value);
      break;
    case 9:
      var value = new SolidityTypes_pb.uint256;
      reader.readMessage(value,SolidityTypes_pb.uint256.deserializeBinaryFromReader);
      msg.setTeampercentage(value);
      break;
    case 10:
      var value = new SolidityTypes_pb.address;
      reader.readMessage(value,SolidityTypes_pb.address.deserializeBinaryFromReader);
      msg.setPriceoracle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StakeMiningParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StakeMiningParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StakeMiningParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StakeMiningParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSupportedtokensList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      SolidityTypes_pb.address.serializeBinaryToWriter
    );
  }
  f = message.getSupporteth();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getMintedtoken();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      SolidityTypes_pb.address.serializeBinaryToWriter
    );
  }
  f = message.getStartblock();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      SolidityTypes_pb.uint256.serializeBinaryToWriter
    );
  }
  f = message.getEndblock();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      SolidityTypes_pb.uint256.serializeBinaryToWriter
    );
  }
  f = message.getTokensperblock();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      SolidityTypes_pb.uint256.serializeBinaryToWriter
    );
  }
  f = message.getMinimumbalance();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      SolidityTypes_pb.uint256.serializeBinaryToWriter
    );
  }
  f = message.getTeamwallet();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      SolidityTypes_pb.address.serializeBinaryToWriter
    );
  }
  f = message.getTeampercentage();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      SolidityTypes_pb.uint256.serializeBinaryToWriter
    );
  }
  f = message.getPriceoracle();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      SolidityTypes_pb.address.serializeBinaryToWriter
    );
  }
};


/**
 * repeated solidity.address supportedTokens = 1;
 * @return {!Array<!proto.solidity.address>}
 */
proto.StakeMiningParameters.prototype.getSupportedtokensList = function() {
  return /** @type{!Array<!proto.solidity.address>} */ (
    jspb.Message.getRepeatedWrapperField(this, SolidityTypes_pb.address, 1));
};


/** @param {!Array<!proto.solidity.address>} value */
proto.StakeMiningParameters.prototype.setSupportedtokensList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.solidity.address=} opt_value
 * @param {number=} opt_index
 * @return {!proto.solidity.address}
 */
proto.StakeMiningParameters.prototype.addSupportedtokens = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.solidity.address, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.StakeMiningParameters.prototype.clearSupportedtokensList = function() {
  this.setSupportedtokensList([]);
};


/**
 * optional bool supportETH = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.StakeMiningParameters.prototype.getSupporteth = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.StakeMiningParameters.prototype.setSupporteth = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional solidity.address mintedToken = 3;
 * @return {?proto.solidity.address}
 */
proto.StakeMiningParameters.prototype.getMintedtoken = function() {
  return /** @type{?proto.solidity.address} */ (
    jspb.Message.getWrapperField(this, SolidityTypes_pb.address, 3));
};


/** @param {?proto.solidity.address|undefined} value */
proto.StakeMiningParameters.prototype.setMintedtoken = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.StakeMiningParameters.prototype.clearMintedtoken = function() {
  this.setMintedtoken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.StakeMiningParameters.prototype.hasMintedtoken = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional solidity.uint256 startBlock = 4;
 * @return {?proto.solidity.uint256}
 */
proto.StakeMiningParameters.prototype.getStartblock = function() {
  return /** @type{?proto.solidity.uint256} */ (
    jspb.Message.getWrapperField(this, SolidityTypes_pb.uint256, 4));
};


/** @param {?proto.solidity.uint256|undefined} value */
proto.StakeMiningParameters.prototype.setStartblock = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.StakeMiningParameters.prototype.clearStartblock = function() {
  this.setStartblock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.StakeMiningParameters.prototype.hasStartblock = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional solidity.uint256 endBlock = 5;
 * @return {?proto.solidity.uint256}
 */
proto.StakeMiningParameters.prototype.getEndblock = function() {
  return /** @type{?proto.solidity.uint256} */ (
    jspb.Message.getWrapperField(this, SolidityTypes_pb.uint256, 5));
};


/** @param {?proto.solidity.uint256|undefined} value */
proto.StakeMiningParameters.prototype.setEndblock = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.StakeMiningParameters.prototype.clearEndblock = function() {
  this.setEndblock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.StakeMiningParameters.prototype.hasEndblock = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional solidity.uint256 tokensPerBlock = 6;
 * @return {?proto.solidity.uint256}
 */
proto.StakeMiningParameters.prototype.getTokensperblock = function() {
  return /** @type{?proto.solidity.uint256} */ (
    jspb.Message.getWrapperField(this, SolidityTypes_pb.uint256, 6));
};


/** @param {?proto.solidity.uint256|undefined} value */
proto.StakeMiningParameters.prototype.setTokensperblock = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.StakeMiningParameters.prototype.clearTokensperblock = function() {
  this.setTokensperblock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.StakeMiningParameters.prototype.hasTokensperblock = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional solidity.uint256 minimumBalance = 7;
 * @return {?proto.solidity.uint256}
 */
proto.StakeMiningParameters.prototype.getMinimumbalance = function() {
  return /** @type{?proto.solidity.uint256} */ (
    jspb.Message.getWrapperField(this, SolidityTypes_pb.uint256, 7));
};


/** @param {?proto.solidity.uint256|undefined} value */
proto.StakeMiningParameters.prototype.setMinimumbalance = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.StakeMiningParameters.prototype.clearMinimumbalance = function() {
  this.setMinimumbalance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.StakeMiningParameters.prototype.hasMinimumbalance = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional solidity.address teamWallet = 8;
 * @return {?proto.solidity.address}
 */
proto.StakeMiningParameters.prototype.getTeamwallet = function() {
  return /** @type{?proto.solidity.address} */ (
    jspb.Message.getWrapperField(this, SolidityTypes_pb.address, 8));
};


/** @param {?proto.solidity.address|undefined} value */
proto.StakeMiningParameters.prototype.setTeamwallet = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.StakeMiningParameters.prototype.clearTeamwallet = function() {
  this.setTeamwallet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.StakeMiningParameters.prototype.hasTeamwallet = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional solidity.uint256 teamPercentage = 9;
 * @return {?proto.solidity.uint256}
 */
proto.StakeMiningParameters.prototype.getTeampercentage = function() {
  return /** @type{?proto.solidity.uint256} */ (
    jspb.Message.getWrapperField(this, SolidityTypes_pb.uint256, 9));
};


/** @param {?proto.solidity.uint256|undefined} value */
proto.StakeMiningParameters.prototype.setTeampercentage = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.StakeMiningParameters.prototype.clearTeampercentage = function() {
  this.setTeampercentage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.StakeMiningParameters.prototype.hasTeampercentage = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional solidity.address priceOracle = 10;
 * @return {?proto.solidity.address}
 */
proto.StakeMiningParameters.prototype.getPriceoracle = function() {
  return /** @type{?proto.solidity.address} */ (
    jspb.Message.getWrapperField(this, SolidityTypes_pb.address, 10));
};


/** @param {?proto.solidity.address|undefined} value */
proto.StakeMiningParameters.prototype.setPriceoracle = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.StakeMiningParameters.prototype.clearPriceoracle = function() {
  this.setPriceoracle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.StakeMiningParameters.prototype.hasPriceoracle = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.StakeMiningProperties.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StakeMiningProperties.prototype.toObject = function(opt_includeInstance) {
  return proto.StakeMiningProperties.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StakeMiningProperties} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StakeMiningProperties.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokensList: jspb.Message.toObjectList(msg.getTokensList(),
    SolidityTypes_pb.address.toObject, includeInstance),
    tokensupportedList: jspb.Message.getRepeatedField(msg, 2),
    mintedtoken: (f = msg.getMintedtoken()) && SolidityTypes_pb.address.toObject(includeInstance, f),
    startblock: (f = msg.getStartblock()) && SolidityTypes_pb.uint256.toObject(includeInstance, f),
    endblock: (f = msg.getEndblock()) && SolidityTypes_pb.uint256.toObject(includeInstance, f),
    tokensperblock: (f = msg.getTokensperblock()) && SolidityTypes_pb.uint256.toObject(includeInstance, f),
    minimumbalance: (f = msg.getMinimumbalance()) && SolidityTypes_pb.uint256.toObject(includeInstance, f),
    teamwallet: (f = msg.getTeamwallet()) && SolidityTypes_pb.address.toObject(includeInstance, f),
    teampercentage: (f = msg.getTeampercentage()) && SolidityTypes_pb.uint256.toObject(includeInstance, f),
    priceoracle: (f = msg.getPriceoracle()) && SolidityTypes_pb.address.toObject(includeInstance, f),
    accountcount: (f = msg.getAccountcount()) && SolidityTypes_pb.uint256.toObject(includeInstance, f),
    lastmintblock: (f = msg.getLastmintblock()) && SolidityTypes_pb.uint256.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StakeMiningProperties}
 */
proto.StakeMiningProperties.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StakeMiningProperties;
  return proto.StakeMiningProperties.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StakeMiningProperties} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StakeMiningProperties}
 */
proto.StakeMiningProperties.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SolidityTypes_pb.address;
      reader.readMessage(value,SolidityTypes_pb.address.deserializeBinaryFromReader);
      msg.addTokens(value);
      break;
    case 2:
      var value = /** @type {!Array<boolean>} */ (reader.readPackedBool());
      msg.setTokensupportedList(value);
      break;
    case 3:
      var value = new SolidityTypes_pb.address;
      reader.readMessage(value,SolidityTypes_pb.address.deserializeBinaryFromReader);
      msg.setMintedtoken(value);
      break;
    case 4:
      var value = new SolidityTypes_pb.uint256;
      reader.readMessage(value,SolidityTypes_pb.uint256.deserializeBinaryFromReader);
      msg.setStartblock(value);
      break;
    case 5:
      var value = new SolidityTypes_pb.uint256;
      reader.readMessage(value,SolidityTypes_pb.uint256.deserializeBinaryFromReader);
      msg.setEndblock(value);
      break;
    case 6:
      var value = new SolidityTypes_pb.uint256;
      reader.readMessage(value,SolidityTypes_pb.uint256.deserializeBinaryFromReader);
      msg.setTokensperblock(value);
      break;
    case 7:
      var value = new SolidityTypes_pb.uint256;
      reader.readMessage(value,SolidityTypes_pb.uint256.deserializeBinaryFromReader);
      msg.setMinimumbalance(value);
      break;
    case 8:
      var value = new SolidityTypes_pb.address;
      reader.readMessage(value,SolidityTypes_pb.address.deserializeBinaryFromReader);
      msg.setTeamwallet(value);
      break;
    case 9:
      var value = new SolidityTypes_pb.uint256;
      reader.readMessage(value,SolidityTypes_pb.uint256.deserializeBinaryFromReader);
      msg.setTeampercentage(value);
      break;
    case 10:
      var value = new SolidityTypes_pb.address;
      reader.readMessage(value,SolidityTypes_pb.address.deserializeBinaryFromReader);
      msg.setPriceoracle(value);
      break;
    case 11:
      var value = new SolidityTypes_pb.uint256;
      reader.readMessage(value,SolidityTypes_pb.uint256.deserializeBinaryFromReader);
      msg.setAccountcount(value);
      break;
    case 12:
      var value = new SolidityTypes_pb.uint256;
      reader.readMessage(value,SolidityTypes_pb.uint256.deserializeBinaryFromReader);
      msg.setLastmintblock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StakeMiningProperties.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StakeMiningProperties.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StakeMiningProperties} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StakeMiningProperties.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokensList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      SolidityTypes_pb.address.serializeBinaryToWriter
    );
  }
  f = message.getTokensupportedList();
  if (f.length > 0) {
    writer.writePackedBool(
      2,
      f
    );
  }
  f = message.getMintedtoken();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      SolidityTypes_pb.address.serializeBinaryToWriter
    );
  }
  f = message.getStartblock();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      SolidityTypes_pb.uint256.serializeBinaryToWriter
    );
  }
  f = message.getEndblock();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      SolidityTypes_pb.uint256.serializeBinaryToWriter
    );
  }
  f = message.getTokensperblock();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      SolidityTypes_pb.uint256.serializeBinaryToWriter
    );
  }
  f = message.getMinimumbalance();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      SolidityTypes_pb.uint256.serializeBinaryToWriter
    );
  }
  f = message.getTeamwallet();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      SolidityTypes_pb.address.serializeBinaryToWriter
    );
  }
  f = message.getTeampercentage();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      SolidityTypes_pb.uint256.serializeBinaryToWriter
    );
  }
  f = message.getPriceoracle();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      SolidityTypes_pb.address.serializeBinaryToWriter
    );
  }
  f = message.getAccountcount();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      SolidityTypes_pb.uint256.serializeBinaryToWriter
    );
  }
  f = message.getLastmintblock();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      SolidityTypes_pb.uint256.serializeBinaryToWriter
    );
  }
};


/**
 * repeated solidity.address tokens = 1;
 * @return {!Array<!proto.solidity.address>}
 */
proto.StakeMiningProperties.prototype.getTokensList = function() {
  return /** @type{!Array<!proto.solidity.address>} */ (
    jspb.Message.getRepeatedWrapperField(this, SolidityTypes_pb.address, 1));
};


/** @param {!Array<!proto.solidity.address>} value */
proto.StakeMiningProperties.prototype.setTokensList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.solidity.address=} opt_value
 * @param {number=} opt_index
 * @return {!proto.solidity.address}
 */
proto.StakeMiningProperties.prototype.addTokens = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.solidity.address, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.StakeMiningProperties.prototype.clearTokensList = function() {
  this.setTokensList([]);
};


/**
 * repeated bool tokenSupported = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {!Array<boolean>}
 */
proto.StakeMiningProperties.prototype.getTokensupportedList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<boolean>} value */
proto.StakeMiningProperties.prototype.setTokensupportedList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {boolean} value
 * @param {number=} opt_index
 */
proto.StakeMiningProperties.prototype.addTokensupported = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.StakeMiningProperties.prototype.clearTokensupportedList = function() {
  this.setTokensupportedList([]);
};


/**
 * optional solidity.address mintedToken = 3;
 * @return {?proto.solidity.address}
 */
proto.StakeMiningProperties.prototype.getMintedtoken = function() {
  return /** @type{?proto.solidity.address} */ (
    jspb.Message.getWrapperField(this, SolidityTypes_pb.address, 3));
};


/** @param {?proto.solidity.address|undefined} value */
proto.StakeMiningProperties.prototype.setMintedtoken = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.StakeMiningProperties.prototype.clearMintedtoken = function() {
  this.setMintedtoken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.StakeMiningProperties.prototype.hasMintedtoken = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional solidity.uint256 startBlock = 4;
 * @return {?proto.solidity.uint256}
 */
proto.StakeMiningProperties.prototype.getStartblock = function() {
  return /** @type{?proto.solidity.uint256} */ (
    jspb.Message.getWrapperField(this, SolidityTypes_pb.uint256, 4));
};


/** @param {?proto.solidity.uint256|undefined} value */
proto.StakeMiningProperties.prototype.setStartblock = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.StakeMiningProperties.prototype.clearStartblock = function() {
  this.setStartblock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.StakeMiningProperties.prototype.hasStartblock = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional solidity.uint256 endBlock = 5;
 * @return {?proto.solidity.uint256}
 */
proto.StakeMiningProperties.prototype.getEndblock = function() {
  return /** @type{?proto.solidity.uint256} */ (
    jspb.Message.getWrapperField(this, SolidityTypes_pb.uint256, 5));
};


/** @param {?proto.solidity.uint256|undefined} value */
proto.StakeMiningProperties.prototype.setEndblock = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.StakeMiningProperties.prototype.clearEndblock = function() {
  this.setEndblock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.StakeMiningProperties.prototype.hasEndblock = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional solidity.uint256 tokensPerBlock = 6;
 * @return {?proto.solidity.uint256}
 */
proto.StakeMiningProperties.prototype.getTokensperblock = function() {
  return /** @type{?proto.solidity.uint256} */ (
    jspb.Message.getWrapperField(this, SolidityTypes_pb.uint256, 6));
};


/** @param {?proto.solidity.uint256|undefined} value */
proto.StakeMiningProperties.prototype.setTokensperblock = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.StakeMiningProperties.prototype.clearTokensperblock = function() {
  this.setTokensperblock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.StakeMiningProperties.prototype.hasTokensperblock = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional solidity.uint256 minimumBalance = 7;
 * @return {?proto.solidity.uint256}
 */
proto.StakeMiningProperties.prototype.getMinimumbalance = function() {
  return /** @type{?proto.solidity.uint256} */ (
    jspb.Message.getWrapperField(this, SolidityTypes_pb.uint256, 7));
};


/** @param {?proto.solidity.uint256|undefined} value */
proto.StakeMiningProperties.prototype.setMinimumbalance = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.StakeMiningProperties.prototype.clearMinimumbalance = function() {
  this.setMinimumbalance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.StakeMiningProperties.prototype.hasMinimumbalance = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional solidity.address teamWallet = 8;
 * @return {?proto.solidity.address}
 */
proto.StakeMiningProperties.prototype.getTeamwallet = function() {
  return /** @type{?proto.solidity.address} */ (
    jspb.Message.getWrapperField(this, SolidityTypes_pb.address, 8));
};


/** @param {?proto.solidity.address|undefined} value */
proto.StakeMiningProperties.prototype.setTeamwallet = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.StakeMiningProperties.prototype.clearTeamwallet = function() {
  this.setTeamwallet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.StakeMiningProperties.prototype.hasTeamwallet = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional solidity.uint256 teamPercentage = 9;
 * @return {?proto.solidity.uint256}
 */
proto.StakeMiningProperties.prototype.getTeampercentage = function() {
  return /** @type{?proto.solidity.uint256} */ (
    jspb.Message.getWrapperField(this, SolidityTypes_pb.uint256, 9));
};


/** @param {?proto.solidity.uint256|undefined} value */
proto.StakeMiningProperties.prototype.setTeampercentage = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.StakeMiningProperties.prototype.clearTeampercentage = function() {
  this.setTeampercentage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.StakeMiningProperties.prototype.hasTeampercentage = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional solidity.address priceOracle = 10;
 * @return {?proto.solidity.address}
 */
proto.StakeMiningProperties.prototype.getPriceoracle = function() {
  return /** @type{?proto.solidity.address} */ (
    jspb.Message.getWrapperField(this, SolidityTypes_pb.address, 10));
};


/** @param {?proto.solidity.address|undefined} value */
proto.StakeMiningProperties.prototype.setPriceoracle = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.StakeMiningProperties.prototype.clearPriceoracle = function() {
  this.setPriceoracle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.StakeMiningProperties.prototype.hasPriceoracle = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional solidity.uint256 accountCount = 11;
 * @return {?proto.solidity.uint256}
 */
proto.StakeMiningProperties.prototype.getAccountcount = function() {
  return /** @type{?proto.solidity.uint256} */ (
    jspb.Message.getWrapperField(this, SolidityTypes_pb.uint256, 11));
};


/** @param {?proto.solidity.uint256|undefined} value */
proto.StakeMiningProperties.prototype.setAccountcount = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.StakeMiningProperties.prototype.clearAccountcount = function() {
  this.setAccountcount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.StakeMiningProperties.prototype.hasAccountcount = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional solidity.uint256 lastMintBlock = 12;
 * @return {?proto.solidity.uint256}
 */
proto.StakeMiningProperties.prototype.getLastmintblock = function() {
  return /** @type{?proto.solidity.uint256} */ (
    jspb.Message.getWrapperField(this, SolidityTypes_pb.uint256, 12));
};


/** @param {?proto.solidity.uint256|undefined} value */
proto.StakeMiningProperties.prototype.setLastmintblock = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.StakeMiningProperties.prototype.clearLastmintblock = function() {
  this.setLastmintblock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.StakeMiningProperties.prototype.hasLastmintblock = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Account.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Account.prototype.toObject = function(opt_includeInstance) {
  return proto.Account.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Account} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Account.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountaddress: (f = msg.getAccountaddress()) && SolidityTypes_pb.address.toObject(includeInstance, f),
    balancesList: jspb.Message.toObjectList(msg.getBalancesList(),
    SolidityTypes_pb.uint256.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Account}
 */
proto.Account.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Account;
  return proto.Account.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Account} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Account}
 */
proto.Account.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SolidityTypes_pb.address;
      reader.readMessage(value,SolidityTypes_pb.address.deserializeBinaryFromReader);
      msg.setAccountaddress(value);
      break;
    case 2:
      var value = new SolidityTypes_pb.uint256;
      reader.readMessage(value,SolidityTypes_pb.uint256.deserializeBinaryFromReader);
      msg.addBalances(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Account.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Account.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Account} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Account.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountaddress();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      SolidityTypes_pb.address.serializeBinaryToWriter
    );
  }
  f = message.getBalancesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      SolidityTypes_pb.uint256.serializeBinaryToWriter
    );
  }
};


/**
 * optional solidity.address accountAddress = 1;
 * @return {?proto.solidity.address}
 */
proto.Account.prototype.getAccountaddress = function() {
  return /** @type{?proto.solidity.address} */ (
    jspb.Message.getWrapperField(this, SolidityTypes_pb.address, 1));
};


/** @param {?proto.solidity.address|undefined} value */
proto.Account.prototype.setAccountaddress = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.Account.prototype.clearAccountaddress = function() {
  this.setAccountaddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Account.prototype.hasAccountaddress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated solidity.uint256 balances = 2;
 * @return {!Array<!proto.solidity.uint256>}
 */
proto.Account.prototype.getBalancesList = function() {
  return /** @type{!Array<!proto.solidity.uint256>} */ (
    jspb.Message.getRepeatedWrapperField(this, SolidityTypes_pb.uint256, 2));
};


/** @param {!Array<!proto.solidity.uint256>} value */
proto.Account.prototype.setBalancesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.solidity.uint256=} opt_value
 * @param {number=} opt_index
 * @return {!proto.solidity.uint256}
 */
proto.Account.prototype.addBalances = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.solidity.uint256, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.Account.prototype.clearBalancesList = function() {
  this.setBalancesList([]);
};


goog.object.extend(exports, proto);
